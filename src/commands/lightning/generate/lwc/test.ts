/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import * as fs from 'fs';
import * as path from 'path';
import { Messages, SfError } from '@salesforce/core';
import { Flags, loglevel, SfCommand } from '@salesforce/sf-plugins-core';

export type GenerateResult = {
  message: string;
  testPath: string;
  className: string;
  elementName: string;
};

Messages.importMessagesDirectory(__dirname);
const messages = Messages.loadMessages('@salesforce/sfdx-plugin-lwc-test', 'create');

export default class GenerateTest extends SfCommand<GenerateResult> {
  public static readonly summary = messages.getMessage('summary');
  public static readonly description = messages.getMessage('description');
  public static readonly examples = messages.getMessages('examples');
  public static readonly requiresProject = true;
  public static readonly deprecateAliases = true;
  public static readonly aliases = ['force:lightning:lwc:test:create'];
  public static readonly flags = {
    file: Flags.file({
      char: 'f',
      summary: messages.getMessage('flags.file.summary'),
      required: true,
      deprecateAliases: true,
      aliases: ['filepath'],
    }),
    loglevel,
  };

  public async run(): Promise<GenerateResult> {
    const { flags } = await this.parse(GenerateTest);
    const testDirName = '__tests__';
    const filepath = flags.file;

    const modulePath = path.isAbsolute(filepath) ? filepath : path.join(process.cwd(), filepath);
    if (path.extname(modulePath) !== '.js') {
      throw new SfError(messages.getMessage('errorFileNotJs', [flags.filepath]));
    }
    if (!fs.existsSync(modulePath)) {
      throw new SfError(messages.getMessage('errorFileNotFound', [flags.filepath]));
    }

    const bundlePath = path.dirname(modulePath);
    const testDirPath = path.join(bundlePath, testDirName);

    const moduleName = path.basename(modulePath, '.js');
    const testName = `${moduleName}.test.js`;
    const testPath = path.join(testDirPath, testName);
    if (fs.existsSync(testPath)) {
      throw new SfError(messages.getMessage('errorFileExists', [testPath]));
    }

    const className = moduleName.charAt(0).toUpperCase() + moduleName.slice(1);
    const elementName = 'c-' + moduleName.replace(/[A-Z]/g, '-$&').toLowerCase();

    const testSuiteTemplate = `import { createElement } from 'lwc';
import ${className} from 'c/${moduleName}';

describe('${elementName}', () => {
    afterEach(() => {
        // The jsdom instance is shared across test cases in a single file so reset the DOM
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('TODO: test case generated by CLI command, please fill in test logic', () => {
        const element = createElement('${elementName}', {
            is: ${className}
        });
        document.body.appendChild(element);
        expect(1).toBe(2);
    });
});`;

    if (!fs.existsSync(testDirPath)) {
      fs.mkdirSync(testDirPath);
    }
    fs.writeFileSync(testPath, testSuiteTemplate);

    this.log(messages.getMessage('logSuccess', [testPath]));
    return {
      message: messages.getMessage('logSuccess', [testPath]),
      testPath,
      className,
      elementName,
    };
  }
}
